// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: indoarea.proto

package indoarea

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4ae89dc0a2214c, []int{0}
}
func (m *Void) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Void.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return m.Size()
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type GetProvincesResponse struct {
	Provinces            []*Province `protobuf:"bytes,1,rep,name=provinces,proto3" json:"provinces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetProvincesResponse) Reset()         { *m = GetProvincesResponse{} }
func (m *GetProvincesResponse) String() string { return proto.CompactTextString(m) }
func (*GetProvincesResponse) ProtoMessage()    {}
func (*GetProvincesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4ae89dc0a2214c, []int{1}
}
func (m *GetProvincesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetProvincesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetProvincesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetProvincesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetProvincesResponse.Merge(m, src)
}
func (m *GetProvincesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetProvincesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetProvincesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetProvincesResponse proto.InternalMessageInfo

func (m *GetProvincesResponse) GetProvinces() []*Province {
	if m != nil {
		return m.Provinces
	}
	return nil
}

type Province struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Province) Reset()         { *m = Province{} }
func (m *Province) String() string { return proto.CompactTextString(m) }
func (*Province) ProtoMessage()    {}
func (*Province) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4ae89dc0a2214c, []int{2}
}
func (m *Province) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Province) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Province.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Province) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Province.Merge(m, src)
}
func (m *Province) XXX_Size() int {
	return m.Size()
}
func (m *Province) XXX_DiscardUnknown() {
	xxx_messageInfo_Province.DiscardUnknown(m)
}

var xxx_messageInfo_Province proto.InternalMessageInfo

func (m *Province) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Province) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetCitiesResponse struct {
	Cities               []*City  `protobuf:"bytes,1,rep,name=cities,proto3" json:"cities,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCitiesResponse) Reset()         { *m = GetCitiesResponse{} }
func (m *GetCitiesResponse) String() string { return proto.CompactTextString(m) }
func (*GetCitiesResponse) ProtoMessage()    {}
func (*GetCitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4ae89dc0a2214c, []int{3}
}
func (m *GetCitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCitiesResponse.Merge(m, src)
}
func (m *GetCitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCitiesResponse proto.InternalMessageInfo

func (m *GetCitiesResponse) GetCities() []*City {
	if m != nil {
		return m.Cities
	}
	return nil
}

type City struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProvinceName         string   `protobuf:"bytes,3,opt,name=province_name,json=provinceName,proto3" json:"province_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *City) Reset()         { *m = City{} }
func (m *City) String() string { return proto.CompactTextString(m) }
func (*City) ProtoMessage()    {}
func (*City) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4ae89dc0a2214c, []int{4}
}
func (m *City) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *City) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_City.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *City) XXX_Merge(src proto.Message) {
	xxx_messageInfo_City.Merge(m, src)
}
func (m *City) XXX_Size() int {
	return m.Size()
}
func (m *City) XXX_DiscardUnknown() {
	xxx_messageInfo_City.DiscardUnknown(m)
}

var xxx_messageInfo_City proto.InternalMessageInfo

func (m *City) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *City) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *City) GetProvinceName() string {
	if m != nil {
		return m.ProvinceName
	}
	return ""
}

type GetDistrictsResponse struct {
	Districts            []*District `protobuf:"bytes,1,rep,name=districts,proto3" json:"districts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetDistrictsResponse) Reset()         { *m = GetDistrictsResponse{} }
func (m *GetDistrictsResponse) String() string { return proto.CompactTextString(m) }
func (*GetDistrictsResponse) ProtoMessage()    {}
func (*GetDistrictsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4ae89dc0a2214c, []int{5}
}
func (m *GetDistrictsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDistrictsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDistrictsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDistrictsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDistrictsResponse.Merge(m, src)
}
func (m *GetDistrictsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDistrictsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDistrictsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDistrictsResponse proto.InternalMessageInfo

func (m *GetDistrictsResponse) GetDistricts() []*District {
	if m != nil {
		return m.Districts
	}
	return nil
}

type District struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CityName             string   `protobuf:"bytes,3,opt,name=city_name,json=cityName,proto3" json:"city_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *District) Reset()         { *m = District{} }
func (m *District) String() string { return proto.CompactTextString(m) }
func (*District) ProtoMessage()    {}
func (*District) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4ae89dc0a2214c, []int{6}
}
func (m *District) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *District) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_District.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *District) XXX_Merge(src proto.Message) {
	xxx_messageInfo_District.Merge(m, src)
}
func (m *District) XXX_Size() int {
	return m.Size()
}
func (m *District) XXX_DiscardUnknown() {
	xxx_messageInfo_District.DiscardUnknown(m)
}

var xxx_messageInfo_District proto.InternalMessageInfo

func (m *District) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *District) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *District) GetCityName() string {
	if m != nil {
		return m.CityName
	}
	return ""
}

type GetSubDistrictsResponse struct {
	SubDistricts         []*SubDistrict `protobuf:"bytes,1,rep,name=SubDistricts,proto3" json:"SubDistricts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetSubDistrictsResponse) Reset()         { *m = GetSubDistrictsResponse{} }
func (m *GetSubDistrictsResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubDistrictsResponse) ProtoMessage()    {}
func (*GetSubDistrictsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4ae89dc0a2214c, []int{7}
}
func (m *GetSubDistrictsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubDistrictsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubDistrictsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubDistrictsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubDistrictsResponse.Merge(m, src)
}
func (m *GetSubDistrictsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSubDistrictsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubDistrictsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubDistrictsResponse proto.InternalMessageInfo

func (m *GetSubDistrictsResponse) GetSubDistricts() []*SubDistrict {
	if m != nil {
		return m.SubDistricts
	}
	return nil
}

type SubDistrict struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DistrictName         string   `protobuf:"bytes,3,opt,name=district_name,json=districtName,proto3" json:"district_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubDistrict) Reset()         { *m = SubDistrict{} }
func (m *SubDistrict) String() string { return proto.CompactTextString(m) }
func (*SubDistrict) ProtoMessage()    {}
func (*SubDistrict) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc4ae89dc0a2214c, []int{8}
}
func (m *SubDistrict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubDistrict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubDistrict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubDistrict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubDistrict.Merge(m, src)
}
func (m *SubDistrict) XXX_Size() int {
	return m.Size()
}
func (m *SubDistrict) XXX_DiscardUnknown() {
	xxx_messageInfo_SubDistrict.DiscardUnknown(m)
}

var xxx_messageInfo_SubDistrict proto.InternalMessageInfo

func (m *SubDistrict) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SubDistrict) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubDistrict) GetDistrictName() string {
	if m != nil {
		return m.DistrictName
	}
	return ""
}

func init() {
	proto.RegisterType((*Void)(nil), "indoarea.Void")
	proto.RegisterType((*GetProvincesResponse)(nil), "indoarea.GetProvincesResponse")
	proto.RegisterType((*Province)(nil), "indoarea.Province")
	proto.RegisterType((*GetCitiesResponse)(nil), "indoarea.GetCitiesResponse")
	proto.RegisterType((*City)(nil), "indoarea.City")
	proto.RegisterType((*GetDistrictsResponse)(nil), "indoarea.GetDistrictsResponse")
	proto.RegisterType((*District)(nil), "indoarea.District")
	proto.RegisterType((*GetSubDistrictsResponse)(nil), "indoarea.GetSubDistrictsResponse")
	proto.RegisterType((*SubDistrict)(nil), "indoarea.SubDistrict")
}

func init() { proto.RegisterFile("indoarea.proto", fileDescriptor_fc4ae89dc0a2214c) }

var fileDescriptor_fc4ae89dc0a2214c = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x4d, 0xd2, 0x52, 0x92, 0x69, 0xbf, 0x7e, 0xb8, 0x28, 0x96, 0x16, 0x42, 0x5d, 0x41, 0x7a,
	0x2a, 0x52, 0x4f, 0xea, 0x45, 0xad, 0x58, 0x41, 0x50, 0x89, 0xd2, 0x83, 0x17, 0x69, 0x93, 0x3d,
	0xcc, 0xc1, 0x24, 0x24, 0xab, 0xd0, 0x1f, 0xe1, 0xdd, 0x9f, 0xe4, 0xd1, 0x9f, 0x20, 0xf5, 0x8f,
	0x48, 0xd6, 0x6c, 0xb2, 0x6b, 0x0a, 0xf6, 0x96, 0x79, 0x33, 0x99, 0xf7, 0xf6, 0xed, 0x5b, 0x68,
	0x63, 0x18, 0x44, 0xb3, 0x84, 0xcd, 0x86, 0x71, 0x12, 0xf1, 0x88, 0xd8, 0xb2, 0xa6, 0x0d, 0xa8,
	0x4f, 0x23, 0x0c, 0xe8, 0x25, 0x6c, 0x4e, 0x18, 0xbf, 0x4d, 0xa2, 0x17, 0x0c, 0x7d, 0x96, 0x7a,
	0x2c, 0x8d, 0xa3, 0x30, 0x65, 0x64, 0x1f, 0x9c, 0x58, 0x82, 0x1d, 0xb3, 0x5f, 0x1b, 0x34, 0x47,
	0x64, 0x58, 0x6c, 0x93, 0xf3, 0x5e, 0x39, 0x44, 0x87, 0x60, 0x4b, 0x98, 0xb4, 0xc1, 0xc2, 0xa0,
	0x63, 0xf6, 0xcd, 0x81, 0xe3, 0x59, 0x18, 0x10, 0x02, 0xf5, 0x70, 0xf6, 0xc4, 0x3a, 0x96, 0x40,
	0xc4, 0x37, 0x3d, 0x86, 0x8d, 0x09, 0xe3, 0x63, 0xe4, 0xa8, 0xd0, 0xee, 0x41, 0xc3, 0x17, 0x48,
	0xce, 0xd9, 0x2e, 0x39, 0xc7, 0xc8, 0x17, 0x5e, 0xde, 0xa5, 0x37, 0x50, 0xcf, 0xea, 0x75, 0x88,
	0xc8, 0x2e, 0xfc, 0x93, 0x2a, 0x1f, 0x45, 0xb3, 0x26, 0x9a, 0x2d, 0x09, 0x5e, 0x67, 0x6a, 0x7e,
	0x7c, 0x38, 0xc7, 0x94, 0x27, 0xe8, 0x73, 0xcd, 0x87, 0x40, 0x82, 0x55, 0x1f, 0xe4, 0xbc, 0x57,
	0x0e, 0xd1, 0x2b, 0xb0, 0x25, 0xbc, 0x96, 0xbc, 0x1e, 0x38, 0x3e, 0xf2, 0x85, 0x2a, 0xcd, 0xce,
	0x00, 0x21, 0xeb, 0x1e, 0xb6, 0x27, 0x8c, 0xdf, 0x3d, 0xcf, 0xab, 0xca, 0x0e, 0xa1, 0xa5, 0xe2,
	0xb9, 0xb8, 0xad, 0x52, 0x9c, 0xd2, 0xf5, 0xb4, 0x51, 0x3a, 0x85, 0xa6, 0x52, 0xaf, 0x6b, 0xa2,
	0x3c, 0xa2, 0x66, 0xa2, 0x04, 0x33, 0xb5, 0xa3, 0x57, 0x0b, 0x6a, 0xa7, 0x31, 0x92, 0x13, 0x68,
	0xa9, 0xa1, 0x22, 0xca, 0x2d, 0x66, 0xa1, 0xeb, 0xba, 0x65, 0xbd, 0x2a, 0x7c, 0xd4, 0x20, 0x47,
	0xe0, 0x14, 0xe1, 0xa8, 0xfc, 0xde, 0xd3, 0x7e, 0xd7, 0x13, 0x44, 0x8d, 0x9c, 0xbd, 0x38, 0xed,
	0x1f, 0xec, 0x15, 0x63, 0xa9, 0x41, 0x2e, 0xe0, 0xff, 0x2f, 0xd7, 0x2b, 0x4b, 0x76, 0xb4, 0x25,
	0xab, 0x2e, 0x88, 0x1a, 0x67, 0xdd, 0xf7, 0xa5, 0x6b, 0x7e, 0x2c, 0x5d, 0xf3, 0x73, 0xe9, 0x9a,
	0x6f, 0x5f, 0xae, 0xf1, 0x50, 0x3c, 0xc0, 0x79, 0x43, 0xbc, 0xc8, 0x83, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x29, 0xc4, 0x00, 0xe2, 0xa3, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	GetProvinces(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetProvincesResponse, error)
	GetCities(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetCitiesResponse, error)
	GetDistricts(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetDistrictsResponse, error)
	GetSubDistricts(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetSubDistrictsResponse, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) GetProvinces(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetProvincesResponse, error) {
	out := new(GetProvincesResponse)
	err := c.cc.Invoke(ctx, "/indoarea.Api/GetProvinces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetCities(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetCitiesResponse, error) {
	out := new(GetCitiesResponse)
	err := c.cc.Invoke(ctx, "/indoarea.Api/GetCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetDistricts(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetDistrictsResponse, error) {
	out := new(GetDistrictsResponse)
	err := c.cc.Invoke(ctx, "/indoarea.Api/GetDistricts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetSubDistricts(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetSubDistrictsResponse, error) {
	out := new(GetSubDistrictsResponse)
	err := c.cc.Invoke(ctx, "/indoarea.Api/GetSubDistricts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	GetProvinces(context.Context, *Void) (*GetProvincesResponse, error)
	GetCities(context.Context, *Void) (*GetCitiesResponse, error)
	GetDistricts(context.Context, *Void) (*GetDistrictsResponse, error)
	GetSubDistricts(context.Context, *Void) (*GetSubDistrictsResponse, error)
}

// UnimplementedApiServer can be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (*UnimplementedApiServer) GetProvinces(ctx context.Context, req *Void) (*GetProvincesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvinces not implemented")
}
func (*UnimplementedApiServer) GetCities(ctx context.Context, req *Void) (*GetCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCities not implemented")
}
func (*UnimplementedApiServer) GetDistricts(ctx context.Context, req *Void) (*GetDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistricts not implemented")
}
func (*UnimplementedApiServer) GetSubDistricts(ctx context.Context, req *Void) (*GetSubDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubDistricts not implemented")
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_GetProvinces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetProvinces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indoarea.Api/GetProvinces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetProvinces(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indoarea.Api/GetCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetCities(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indoarea.Api/GetDistricts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetDistricts(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetSubDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetSubDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indoarea.Api/GetSubDistricts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetSubDistricts(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "indoarea.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProvinces",
			Handler:    _Api_GetProvinces_Handler,
		},
		{
			MethodName: "GetCities",
			Handler:    _Api_GetCities_Handler,
		},
		{
			MethodName: "GetDistricts",
			Handler:    _Api_GetDistricts_Handler,
		},
		{
			MethodName: "GetSubDistricts",
			Handler:    _Api_GetSubDistricts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indoarea.proto",
}

func (m *Void) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Void) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Void) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetProvincesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetProvincesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetProvincesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Provinces) > 0 {
		for iNdEx := len(m.Provinces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Provinces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndoarea(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Province) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Province) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Province) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cities) > 0 {
		for iNdEx := len(m.Cities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndoarea(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *City) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *City) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *City) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ProvinceName) > 0 {
		i -= len(m.ProvinceName)
		copy(dAtA[i:], m.ProvinceName)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.ProvinceName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDistrictsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDistrictsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDistrictsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Districts) > 0 {
		for iNdEx := len(m.Districts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Districts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndoarea(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *District) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *District) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *District) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CityName) > 0 {
		i -= len(m.CityName)
		copy(dAtA[i:], m.CityName)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.CityName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSubDistrictsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubDistrictsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubDistrictsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SubDistricts) > 0 {
		for iNdEx := len(m.SubDistricts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubDistricts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIndoarea(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubDistrict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubDistrict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubDistrict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DistrictName) > 0 {
		i -= len(m.DistrictName)
		copy(dAtA[i:], m.DistrictName)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.DistrictName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintIndoarea(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIndoarea(dAtA []byte, offset int, v uint64) int {
	offset -= sovIndoarea(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Void) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetProvincesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Provinces) > 0 {
		for _, e := range m.Provinces {
			l = e.Size()
			n += 1 + l + sovIndoarea(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Province) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cities) > 0 {
		for _, e := range m.Cities {
			l = e.Size()
			n += 1 + l + sovIndoarea(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *City) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	l = len(m.ProvinceName)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDistrictsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Districts) > 0 {
		for _, e := range m.Districts {
			l = e.Size()
			n += 1 + l + sovIndoarea(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *District) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	l = len(m.CityName)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSubDistrictsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SubDistricts) > 0 {
		for _, e := range m.SubDistricts {
			l = e.Size()
			n += 1 + l + sovIndoarea(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubDistrict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	l = len(m.DistrictName)
	if l > 0 {
		n += 1 + l + sovIndoarea(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIndoarea(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIndoarea(x uint64) (n int) {
	return sovIndoarea(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Void) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndoarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Void: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Void: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIndoarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetProvincesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndoarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetProvincesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetProvincesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provinces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provinces = append(m.Provinces, &Province{})
			if err := m.Provinces[len(m.Provinces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndoarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Province) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndoarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Province: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Province: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndoarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndoarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cities = append(m.Cities, &City{})
			if err := m.Cities[len(m.Cities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndoarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *City) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndoarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: City: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: City: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvinceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvinceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndoarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDistrictsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndoarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDistrictsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDistrictsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Districts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Districts = append(m.Districts, &District{})
			if err := m.Districts[len(m.Districts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndoarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *District) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndoarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: District: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: District: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CityName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndoarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubDistrictsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndoarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubDistrictsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubDistrictsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubDistricts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubDistricts = append(m.SubDistricts, &SubDistrict{})
			if err := m.SubDistricts[len(m.SubDistricts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndoarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubDistrict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndoarea
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubDistrict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubDistrict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndoarea
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIndoarea
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistrictName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndoarea(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIndoarea
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndoarea(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndoarea
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndoarea
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIndoarea
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIndoarea
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIndoarea
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIndoarea        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndoarea          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIndoarea = fmt.Errorf("proto: unexpected end of group")
)
